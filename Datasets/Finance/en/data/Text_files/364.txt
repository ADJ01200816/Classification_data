Designing an information system involves multiple layers, from understanding the requirements to implementing the system with source code. Below, I outline a high-level design scheme for an information system and provide a simple example of source code related to such a system.

### High-Level Information System Design Scheme:

**1. Requirements Gathering:**
   - Identify stakeholders.
   - Define the purpose of the system.
   - Gather functional and non-functional requirements.

**2. System Analysis:**
   - Analyze the gathered requirements.
   - Create use cases and user stories.
   - Define system constraints and dependencies.

**3. System Design:**
   - Create a high-level architecture (e.g., client-server, three-tier, microservices).
   - Design the database schema.
   - Define data flow, control flow, and entity-relationship diagrams.
   - Outline user interfaces.

**4. Detailed Design:**
   - Define APIs and data contracts.
   - Create detailed database design.
   - Define algorithms and data structures.
   - Outline the security and privacy requirements.

**5. Implementation:**
   - Choose programming languages and frameworks.
   - Start coding with best practices in mind (e.g., unit tests, code reviews).
   - Develop in iterations, potentially following Agile methodologies.

**6. Testing:**
   - Unit testing.
   - Integration testing.
   - System testing.
   - User acceptance testing.

**7. Deployment:**
   - Choose deployment strategy (e.g., continuous deployment, phased rollout).
   - Set up production environment.
   - Deploy the system and monitor.

**8. Maintenance:**
   - Monitor system performance.
   - Fix any issues or bugs.
   - Update the system with new features or changes as needed.

### Example of Source Code:

Let's say part of the information system is a web service that returns data about users. Here's a very simplified example in Python using Flask (a micro web framework):

```python
from flask import Flask, jsonify

app = Flask(__name__)

# Simulate a simple database of users
users_db = [
    {"id": 1, "name": "John Doe", "email": "john@example.com"},
    {"id": 2, "name": "Jane Smith", "email": "jane@example.com"}
]

@app.route('/users', methods=['GET'])
def get_users():
    return jsonify(users_db)

if __name__ == '__main__':
    app.run(debug=True)
```

In this source code snippet:

- We import the necessary modules from Flask.
- We simulate a database with a Python list of dictionaries.
- We define a route `/users` that handles GET requests and returns the list of users in JSON format.
- We run the Flask application in debug mode for easier development and debugging.

To deploy this simple web service, you'd need to have Python and Flask installed on your server, and you'd execute the script. This is a very basic example and real-world applications would require more robust error handling, security measures, and database integration.

Keep in mind that source code for a full-fledged information system would encompass many more files and modules, responsible for different aspects such as database interactions, authentication, authorization, business logic, and more.